Overview of whole project progress:
ECS System: Basic component and entity template setup.
			Basic component manager
			Basic component storage.
			Basic entity manager
			Basic general system
			Basic Coordinator class that handles all the managers in one spot
			Basic Event Bus 
			Re-Written Texture class as a c struct
			Basic main class based off of Texture clicker.cpp to actually have a proper insertion point
			Basic Grid, pathfinding and tile systems
			Debug manager and several debug systems to help with debugging and visualisations
			GridManager to couple Grid and Pathfinding together.
			

Things to look into in future for optimisation and fixes:
Need to figure out memory management and garbage collection. (stretch goal)
Currently I am just passing the raw structs around when dealing with data in the ECS system.
This is not such a big deal for entities, but some of the components (especially Sprite), have the potential to 
become quite large. It might be better to deal with pointers to improve performance. Look into this in future.
Need to find a way of packaging (or at least allowing multiples of) the tile-grid-pathfinding linkage. Currently
it works fine since I only need one, but in future I may want to use several and then it will be a pain
The pathfinding needs to have Steering Behaviours added. It currently does not have the actual start
and end positions added to the returned path. Maybe steering behaviours could be used to fix that, or could use 
rdp to simplify the a* path.
Use Entity archetypes -> organise entites by the components that they have as and then just have the systems 
fetch entities from these archetypes. Apparently this optimises the ECS
Need to fix the way signatures are set for Systems. Currently this is done manually every time I want to 
add a system using the coordinator. Need to have a way of each system just holding its own signature, then can
just use that with the coordinator
Need to add a way to check if a system has already been initialised -> maybe just add an "initialised" bool, 
to prevent repeat initialisations. Or figure out a better way of initialising systems, because currently, if a system
is added after gCoordinator init is called, its fucked, and have to do it manually, but at the same time, can just
add manual init() calls all the time, since this will mean double initialisations. I think the bool is the best option
for now
Could use tags to have multiple tile/grid systems and use this with archetypes to allow many grids and pathfinding layouts
Need to get rid of use of magic numbers when dealing with TileData subcells. 

Week 1 Notes:
Implemented an Event Bus
Successful conversion of old erasing system to use the new ECS engine.
Converted texture class into struct format, so that could pass around pure data rather than objects (even though
there is no meaningful difference between structs and classes in c++)
Created three basic components (Transform, Collider and Sprite-> this is just a re-write of the old Texture class)
Modified the old erasure/destruction methods to work with the new Sprite struct.
Re-wrote the insertion point (it is now in an actual file called Main.cpp rather than just Texture Clicker).
It now uses the ECS structures -> this allows me to package away the code into different systems.
4 new systems that accomplish this:
			RenderSystem -> Handles sprite rendering
			TransformSystem -> Handles movement (not really used at the moment, needs more work)
			DestructionSystem -> Handles sprite destruction
			DebugSystem -> Displays debug information, currently only used for seeing collider outlines but can easily be extended in future.
No physics system since I am not sure yet how I am going to link it with the sprite destruction. That will be a future 
part of the project
I created an input manager class, mostly to help tell the rest of the program what keys are pressed (right now I 
only use it for mouse buttons). SDL does have its own in built input system, and this is essentially just a messenger
class that carries the information from SDL to the rest of the system, since the SDL manager works by polling 
an event queue (done in main), which the manager then uses to update its own variables that can be seen by all systems
(since it is stored in the Coordinator class).

Week 2:
Implemented a tilemap system. It loads grid data from a .map file, and then uses this, alongside a provided stylesheet,
to render the grid on the screen.
Implemented a Grid system. The difference between this and the tilemap, is that the tile map is used just for 
initial rendering. The grid system checks and updates the pathfinding system on which tiles are walkable or not
Implemented a pathfinding system. Currently it only does very simple 8-directional a*. Need to add path simplification
and steering behaviours in future, but this it is not necessary right now.
The pathfinding system requests grid from the Grid system using an event and then runs a* on it.
These three system currently work well and are linked, but this relies on using a lot of global variables and constants
It would be good to find a way to package these systems more securely in one to enable multiple grids etc.

Overhauled the way that debugging works, there is now a DebugManager class that batch calls the debuggers
All debuggers now inherit from a type synonym of System called Debug. It would be good to make this an actual class,
since all Debug - based systems all have the exact same structure, the init() and update() methods from the System class,
plus an onSomeDebugEvent() method, and a boolean display. However, I am not sure how to implement the 
onSomeDebugEvent() method as a virtual inheritable method, while constraining the type in the definition, to only
match the event that the specific Debug class uses to avoid erroneous Event calls.

Added a GridDebugSystem and a PathFindingDebugSystem, which are used to provide helpful viewing for the Grid and
Pathfinding systems respectively

Fixed a large bug in the Coordinator that meant Systems could be created without a signature. This led to some 
very annoying errors where entities where being added to systems where they should not be because the system 
has a blank signature at the point of the entities' instantiation, and this then crashed the program as the system 
attempted to access a component the entity did not have.

Week 3:
Made an attempt at implementing a destruction pathfinding system using marching squares. Quickly realised that it 
would not work, since essentially it would require breaking down the entire grid into subcells, finding a path through
them, and building it back up into full cells to account for agents of different sizes, which would have been 
cumbersome to code and in terms of performance.

Settled on trying a different approach by changing the way tile data was stored. Created a GridManager class, 
which stored a shared_ptr to a GridSystem, a PathFindingSystem and GridData (a new struct I had created to store
data about grid dimensions as well as the tile layout), that is passed to the GridSystem and PathFindingSystem so
that grid updates don't have to be sent as events, can just check the data at a pointer.

Created a TileData struct to hold specific data about tiles. Tiles now have a status, which can be 0 (passable)
1 (impassable) or 2 (partial). They also store a representation of their layout as subcells. Right now I am using
4x4 subcell grids, but I think that this should be expanded in future to allow dynamic sizing based on the dimensions
of the tiles themselves, i.e. bigger tiles have larger subcell grids. Currently this is an array of uint8, but it 
could be changed to a bitset for optimisation purposes. It also stores which sides of the tile have passable subcells. 
This is (sortof?) useful because it can make some checks quicker. The GridData struct stores a vector of these 
TileData structs to represent the layout of the grid.

Started the process of decoupling the TileSystem from the GridSystem. This is because I feel that there could be 
multiple tilesets layered on top of eachother (background, terrain, objects, etc.) which will make determining 
the pathfinding grid much harder, and also because the pathfinding grid may encompass many different tilesets, 
which represent different regions of the map. Right now, these systems are still loaded from the same file for 
convenience, but I hope to change this to be more rigorous in future. I think that determining which tiles 
are passable or impassable could still be done via files, but partial tiles need to be done via checking colliders
or something.

Started implementing the pathfinding system on the subcell grids. Essentially, it starts by running some checks 
to see if (a), there are more than two sides with passable subcell tiles, and (b), that the agent can actually enter
onto the tile. Then it goes over the subcell grid, and marks all the cells that the agent could stand in (assuming
that cell was the top left corner), and then runs bfs. If the bfs reaches a tile that is on a different edge to the 
one the agent started from, we have a path for this agent through the subcell grid. An important note is that when
we add neighbour cells to the bfs queue, we only add neighbours on the non-diagonal directions. This is because 
agents will most likely have to use steering behaviours to path through partial tiles, and since both the agents 
and whatever is in the partial tile will have colliders, moving across diagonals probably means that the agent 
will just end up ramming themselves into a corner, unable to pass through

There are some assumptions for this algorithm: The size of the agent is less than 4, and the shape of the agent 
could be approximated to a square. The reason for the first assumption is because I haven't figured out pathing across
multiple subcell grids (that is the next step), and for the second is because then we would need to account for
agent orienation, which adds a lot of new complexities which I could really do without at this point, but it is 
something that I plan to revisit once I have a full working version of this pathfinding system.

Currently, this is only being used to determine pathable neighbours in my modified A*. There is currently no 
version of this algorithm that actually figures out where to go if a partial tile is the current tile. That needs
to be added.

Week 4 (and a little bit of 5):
Finished the destructible pathfinding system.
My first attempt at the algorithm was as follows:
	Do normal A*, with the following cases
	(1)If the current tile is walkable, and the neighbour tile is walkable, do A* as normal
	(2)If the current tile is walkable, and the neighbour tile is partial, check if the neighbour
	tile is pathable by itself, then with an adjacent tile. If it is, push it to the open list.
	(3)If the current tile is partial, for each of its neighbours, check if there is a path from 
	the current tile to the adjacent tile without crossing another tile.
I quickly realised that I could replace step 2 with just checking if there is a path from the current
tile to the partial tile as in step 3. This reduced the size of my code by about 1/3
The checking for a path works the same as defined in my notes for week 3, except now the algorithm 
is modified to find a proper ending position that the tile can reach. This is done by checking all of 
the subcells adjacent to the current tile. If there is a subcell on the target neighboour tile that is 
considered walkable (just being able to fit partially on it, not the whole agent), then that is a 
satisfactory goal position and we run bfs to get a path from the start position to the end position.

There is currently a clear optimisation in that the algorithm keeps recalculating the pathable subcells
for each neighbour, even though these would be the same for each, only the goal position changes.

Currently the assumptions for the algorithm remain the same. I do plan on addressing these and the optimisation
in future, I just want to work on other parts of the program and first to have a somewhat working
prototype.